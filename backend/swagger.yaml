openapi: 3.0.0
info:
  title: Requisition System API
  description: API documentation for the Requisition System
  version: 1.0.0
servers:
  - url: /api
    description: API base URL
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum: [regular_user, approver, admin]
        authorityLevel:
          type: integer
        departmentId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Department:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Requisition:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        requestorId:
          type: string
          format: uuid
        departmentId:
          type: string
          format: uuid
        amount:
          type: number
          format: float
        category:
          type: string
        priority:
          type: string
          enum: [low, medium, high]
        dueDate:
          type: string
          format: date-time
        status:
          type: string
          enum: [draft, pending, partially_approved, approved, rejected, revised]
        currentApproverLevel:
          type: integer
        revisionNumber:
          type: integer
        originalRequisitionId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Approval:
      type: object
      properties:
        id:
          type: string
          format: uuid
        requisitionId:
          type: string
          format: uuid
        approverId:
          type: string
          format: uuid
        status:
          type: string
          enum: [pending, approved, rejected]
        comment:
          type: string
        approverLevel:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    ApprovalWorkflow:
      type: object
      properties:
        id:
          type: string
          format: uuid
        departmentId:
          type: string
          format: uuid
        categoryId:
          type: string
        amountThreshold:
          type: number
          format: float
        approverSequence:
          type: array
          items:
            type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Error:
      type: object
      properties:
        status:
          type: string
          example: error
        statusCode:
          type: integer
        message:
          type: string
security:
  - bearerAuth: []
paths:
  /health:
    get:
      summary: Health check endpoint
      tags:
        - Health
      security: []
      responses:
        '200':
          description: API is running
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: API is running
                  timestamp:
                    type: string
                    format: date-time
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName
                - lastName
                - email
                - password
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                departmentId:
                  type: string
                  format: uuid
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User registered successfully
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                      token:
                        type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/login:
    post:
      summary: Login user
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Login successful
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                      token:
                        type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /requisitions:
    get:
      summary: Get all requisitions
      tags:
        - Requisitions
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [draft, pending, partially_approved, approved, rejected, revised]
        - in: query
          name: priority
          schema:
            type: string
            enum: [low, medium, high]
        - in: query
          name: category
          schema:
            type: string
        - in: query
          name: departmentId
          schema:
            type: string
            format: uuid
        - in: query
          name: startDate
          schema:
            type: string
            format: date
        - in: query
          name: endDate
          schema:
            type: string
            format: date
        - in: query
          name: search
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of requisitions
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      requisitions:
                        type: array
                        items:
                          $ref: '#/components/schemas/Requisition'
                      pagination:
                        type: object
                        properties:
                          total:
                            type: integer
                          page:
                            type: integer
                          limit:
                            type: integer
                          totalPages:
                            type: integer
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new requisition
      tags:
        - Requisitions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - description
                - departmentId
                - category
              properties:
                title:
                  type: string
                description:
                  type: string
                departmentId:
                  type: string
                  format: uuid
                amount:
                  type: number
                  format: float
                category:
                  type: string
                priority:
                  type: string
                  enum: [low, medium, high]
                  default: medium
                dueDate:
                  type: string
                  format: date-time
      responses:
        '201':
          description: Requisition created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Requisition created successfully
                  data:
                    type: object
                    properties:
                      requisition:
                        $ref: '#/components/schemas/Requisition'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /approvals/pending:
    get:
      summary: Get all pending approvals for the current user
      tags:
        - Approvals
      responses:
        '200':
          description: List of pending approvals
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      pendingApprovals:
                        type: array
                        items:
                          $ref: '#/components/schemas/Approval'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /approvals/{id}/approve:
    post:
      summary: Approve a requisition
      tags:
        - Approvals
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
      responses:
        '200':
          description: Requisition approved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Requisition approved successfully
                  data:
                    type: object
                    properties:
                      requisition:
                        $ref: '#/components/schemas/Requisition'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /approvals/{id}/reject:
    post:
      summary: Reject a requisition
      tags:
        - Approvals
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - comment
              properties:
                comment:
                  type: string
      responses:
        '200':
          description: Requisition rejected successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Requisition rejected successfully
                  data:
                    type: object
                    properties:
                      requisition:
                        $ref: '#/components/schemas/Requisition'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
